<?php

/**
  * @file
  * HUF module   
  */  

/**
 * Function recursively changes case of all array keys and subkeys
 *  
 * @param1 - $array to change case
 * @param2 - $case to change cases to (CASE_LOWER or CASE_UPPER),
 *            default value is CASE_LOWER
 * @param3 - $flag_rec recurse to subkeys (TRUE/FALSE)
 * 
 * @return - no return values
 */         
function huf_array_change_key_case_recursive(&$array, $case = CASE_LOWER, $flag_rec = TRUE) {
   $array = array_change_key_case($array, $case);
   if ( $flag_rec ) {
     foreach ($array as $key => $value) {
         if ( is_array($value) ) {
          array_change_key_case_recursive($array[$key], $case);
          }
      }
    }
}

/**
 * Function converts Simple XML object to associative array
 * @param - $xml object to convert
 * @return - converted associative array
 */   
function huf_xml_to_assoc($xml) {
  $assoc = array();
  
  foreach((array)$xml as $key => $value) {
    if(is_object($value)) {
      $assoc[$key] = convert_xml_to_assoc($value);
      } else {
      $assoc[$key] = $value;
      }
    }
    
  return $assoc;
}

/**
 * glitch dot mr at gmail dot com 23-May-2012 06:02 
 * This is very simple implementation of issetor() for PHP. It works like ?? in 
 * C#, // in Perl (it can access undefined hash keys without it nevertheless) 
 * or ? in CoffeeScript (also can access undefined hash keys too). You shouldn't
 * use directly $_GET['something'] (it can generate E_NOTICEs in case somebody 
 * would try hacking your site), 
 * but isset($_GET['something']) ? $_GET['something'] : '' is long for many 
 * people (for so common operation). This alternative makes using superglobals 
 * easier.
 * This code doesn't generate notices in case variable doesn't exist.
 * http://www.php.net/manual/en/function.isset.php
 */   
function huf_issetor(&$variable, $or = NULL) {
    return $variable === NULL ? $or : $variable;
}

/**
 * Thanx to 
 * knyrii at gmail dot com12-Jul-2011 09:45
 *
 * A function I use for fixing date ranges. Can also be used to create a new  
 *  date by subtracting or adding days, months, or years. The resulting date 
 *  will always be a valid date.
 * 
  * Fixes the date so that it is valid. Can handle negative values. Great for creating date ranges.
  * NOTE: Changes the passed variables' values.
  * Ex. 2-29-2001 will become 3-1-2001
  * 15-6-2011 will become 3-6-2012
  * 3-0-2001 will become 2-28-2001
  * -10-29-2002 will become 3-1-2001
  * @param integer $day 0 values decrement a month and is set to the last day of that month.
  * @param integer $month 0 values decrement a year and is set to 12.
  * @param integer $year
  * @param boolean $unix Optional. Default is FALSE. Use UNIX date format
  * @return string The resulting string
  */
function huf_fix_date(&$day,&$month,&$year,$unix=FALSE){
   if($month>12){
       while ($month>12){
           $month-=12;//subtract a $year
           $year++;//add a $year
       }
   } else if ($month<1){
       while ($month<1){
           $month +=12;//add a $year
           $year--;//subtract a $year
       }
   }
   if ($day>31){
       while ($day>31){
           if ($month==2){
               if (huf_is_leap_year($year)){//subtract a $month
                   $day-=29;
               } else{
                   $day-=28;
               }
               $month++;//add a $month
           } else if (huf_thirty_one_day($month)){
               $day-=31;
               $month++;
           } else{
               $day-=30;
               $month++;
           }
       }//end while
       while ($month>12){ //recheck $months
           $month-=12;//subtract a $year
           $year++;//add a $year
       }
   } else if ($day<1){
       while ($day<1){
           $month--;//subtract a $month
           if ($month==2){
               if (is_leap_year($year)){//add a $month
                   $day+=29;
               }else{
                   $day+=28;
               }
           } else if (huf_thirty_one_day($month)){
               $day+=31;
           } else{
               $day+=30;
           }
       }//end while
       while ($month<1){//recheck $months
           $month+=12;//add a $year
           $year--;//subtract a $year
       }
   } else if ($month==2){
       if (huf_is_leap_year($year)&&$day>29){
           $day-=29;
           $month++;
       } else if($day>28){
           $day-=28;
           $month++;
       }
   } else if (!huf_thirty_one_day($month)&&$day>30){
       $day-=30;
       $month++;
   }
   if ($year<1900) $year=1900;
   if ($unix){
       return "$year-$month-$day";
   } else{
       return "$day-$month-$year";
   }
}
/**
* Checks to see if the month has 31 days.
* @param integer $month
* @return boolean True if the month has 31 days
*/
function huf_thirty_one_day($month){
   //1234567 89012:1357 802
   //JfMaMjJ AsOnD:JMMJ AOD
   if ($month<8)
       return $month%2==1;
   else
       return $month%2==0;
}
/**
* Checks to see if the year is a leap year.
* @param integer $year
* @return boolean True if the year is a leap year
*/
function huf_is_leap_year($year){
   return (0 ==$year%4&&0!=$year%100 || 0 ==$year%400);
}
 
function huf_next_months_date($months, $begin_month = NULL, $begin_year = NULL) {

  $begin_month = !empty($begin_month) ? $begin_month : (int)date('m');
  $begin_year = !empty($begin_year) ? $begin_year : (int)date('Y');  

  $end_year = $begin_year;
  
  $end_month = $begin_month + $months;
  if($end_month > 12) {
    while($end_month > 12) {
      $end_month -= 12;
      $end_year++;
      }
    } elseif($end_month <= 0) {
    while($end_month <= 0) {
      $end_month += 12;
      $end_year--;
      }
    }
    
  if($end_month == 2) {
    $end_day = huf_is_leap_year($end_year) ? 29 : 28;
    } else {
    $end_day = huf_thirty_one_day($end_month) ? 31 : 30;
    } 
  
  return huf_fix_date($end_day, $end_month, $end_year);
}

function huf_bool2int($bool_str) {
    $bool_str = strtolower($bool_str);
    return ((($bool_str == 'true') || ($bool_str == 'yes')) ? 1 : 0);
}

function huf_int2bool($bool_int) {
    return ($bool_int == 0 ? 'false' : 'true');
}